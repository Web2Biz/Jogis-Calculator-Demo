{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","textAlign","formControl","marginBottom","formControlLBH","marginLeft","marginRight","App","classes","React","useState","flag","setFlag","price","setPrice","weight","setWeight","length","setLength","breadth","setBreadth","height","setHeight","quantity","setQuantity","totalAmount","setTotalAmount","measure","setMeasure","getLBHInch","l","b","h","p","Math","round","getLBHFeet","getVolume","w","q","className","Container","fixed","Grid","container","style","justify","item","xs","sm","md","lg","Card","CardHeader","CardContent","FormControl","fullWidth","variant","TextField","id","label","type","name","onChange","event","value","target","spacing","InputLabel","htmlFor","Select","native","inputProps","aria-label","quan","Button","color","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9c9e9ceb.chunk.js","sourcesContent":["// import logo from './logo.svg';\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Card,\r\n  CardHeader,\r\n  CardContent,\r\n  TextField,\r\n  Container,\r\n  FormControl,\r\n  InputLabel,\r\n  Select,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"./App.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    textAlign: \"center\",\r\n  },\r\n  formControl: {\r\n    marginBottom: 12,\r\n  },\r\n  formControlLBH: {\r\n    marginLeft: \"0 px\",\r\n    marginRight: \"0 px\",\r\n    marginBottom: 12,\r\n  },\r\n}));\r\n\r\nfunction App() {\r\n  const classes = useStyles();\r\n  const [flag, setFlag] = React.useState(true);\r\n  const [price, setPrice] = React.useState(0);\r\n  const [weight, setWeight] = React.useState(0);\r\n  const [length, setLength] = React.useState(0);\r\n  const [breadth, setBreadth] = React.useState(0);\r\n  const [height, setHeight] = React.useState(0);\r\n  const [quantity, setQuantity] = React.useState(0);\r\n  const [totalAmount, setTotalAmount] = React.useState(0);\r\n\r\n  const [measure, setMeasure] = React.useState(0);\r\n\r\n  function getLBHInch(l, b, h, p) {\r\n    return Math.round((((l * b * h) / 1728) * p));\r\n  }\r\n\r\n  function getLBHFeet(l, b, h, p) {\r\n    return Math.round((l * b * h * p));\r\n  }\r\n\r\n  function getVolume(w, p, q) {\r\n    return Math.round((w * p * q));\r\n  }\r\n\r\n  const handleWeightChange = (event) => {\r\n    // console.log(event.target.value);\r\n    var value = event.target.value;\r\n    if (value <= 20) {\r\n      setWeight(value);\r\n      setFlag(true);\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(length, breadth, height, price) * quantity);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(length, breadth, height, price) * quantity);\r\n      else if (measure === 0) {\r\n        setTotalAmount(0);\r\n      }\r\n    } else {\r\n      setWeight(value);\r\n      setFlag(false);\r\n      setTotalAmount(getVolume(value, price, quantity));\r\n    }\r\n  };\r\n\r\n  const handleLengthChange = (event) => {\r\n    var l = event.target.value;\r\n    setLength(l);\r\n    if (flag) {\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(l, breadth, height, price) * quantity);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(l, breadth, height, price) * quantity);\r\n    }\r\n  };\r\n\r\n  const handleBreadthChange = (event) => {\r\n    var b = event.target.value;\r\n    setBreadth(b);\r\n    if (flag) {\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(length, b, height, price) * quantity);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(length, b, height, price) * quantity);\r\n    }\r\n  };\r\n\r\n  const handleHeightChange = (event) => {\r\n    var h = event.target.value;\r\n    setHeight(h);\r\n    if (flag) {\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(length, breadth, h, price) * quantity);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(length, breadth, h, price) * quantity);\r\n    }\r\n  };\r\n\r\n  const handlePriceChange = (event) => {\r\n    var p = event.target.value;\r\n    setPrice(p);\r\n    if (!flag) {\r\n      setTotalAmount(getVolume(weight, p, quantity));\r\n    } else {\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(length, breadth, height, p) * quantity);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(length, breadth, height, p) * quantity);\r\n    }\r\n  };\r\n\r\n  const handleQuantityChange = (event) => {\r\n    // console.log(event.target.value);\r\n    var quan = event.target.value;\r\n    setQuantity(quan);\r\n    if (!flag) {\r\n      setTotalAmount(getVolume(weight, price, quan));\r\n      // console.log(event.target.value);\r\n    } else {\r\n      if (measure === \"1\")\r\n        setTotalAmount(getLBHInch(length, breadth, height, price) * quan);\r\n      else if (measure === \"2\")\r\n        setTotalAmount(getLBHFeet(length, breadth, height, price) * quan);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const value = event.target.value;\r\n    setMeasure(value);\r\n    if (flag) {\r\n      if (value === \"1\")\r\n        setTotalAmount(getLBHInch(length, breadth, height, price) * quantity);\r\n      else if (value === \"2\")\r\n        setTotalAmount(getLBHFeet(length, breadth, height, price) * quantity);\r\n    }\r\n    // console.log(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className={classes.root}>\r\n        <br />\r\n        <Container fixed>\r\n          <Grid container style={{ textAlign: \"center\" }} justify=\"center\">\r\n            <Grid item xs={12} sm={12} md={5} lg={5}>\r\n              <Card className={classes.root}>\r\n                <CardHeader></CardHeader>\r\n                <CardContent>\r\n                  <FormControl\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <TextField\r\n                      id=\"outlined-basic\"\r\n                      label=\"Weight(Kg)\"\r\n                      type=\"number\"\r\n                      variant=\"outlined\"\r\n                      name=\"weight\"\r\n                      onChange={handleWeightChange}\r\n                    />\r\n                  </FormControl>\r\n                  {flag && (\r\n                    <div>\r\n                      <Grid container>\r\n                        <Grid item xs={12}>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                              <FormControl\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                className={classes.formControl}\r\n                              >\r\n                                <TextField\r\n                                  id=\"outlined-basic\"\r\n                                  label=\"Length\"\r\n                                  type=\"number\"\r\n                                  variant=\"outlined\"\r\n                                  onChange={handleLengthChange}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                              <FormControl\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                className={classes.formControlLBH}\r\n                              >\r\n                                <TextField\r\n                                  id=\"outlined-basic\"\r\n                                  label=\"Breadth\"\r\n                                  type=\"number\"\r\n                                  variant=\"outlined\"\r\n                                  onChange={handleBreadthChange}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={12} md={4} lg={4}>\r\n                              <FormControl\r\n                                fullWidth\r\n                                variant=\"outlined\"\r\n                                className={classes.formControl}\r\n                              >\r\n                                <TextField\r\n                                  id=\"outlined-basic\"\r\n                                  label=\"Height\"\r\n                                  type=\"number\"\r\n                                  variant=\"outlined\"\r\n                                  onChange={handleHeightChange}\r\n                                />\r\n                              </FormControl>\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                      <FormControl\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        className={classes.formControl}\r\n                      >\r\n                        <InputLabel htmlFor=\"outlined-age-native-simple\">\r\n                          Measure\r\n                        </InputLabel>\r\n                        <Select\r\n                          native\r\n                          value={measure}\r\n                          onChange={handleChange}\r\n                          label=\"Measure\"\r\n                          inputProps={{\r\n                            name: \"age\",\r\n                            id: \"outlined-age-native-simple\",\r\n                          }}\r\n                        >\r\n                          <option aria-label=\"None\" value=\"0\">\r\n                            Select Measure\r\n                          </option>\r\n                          <option value={1}>Inch</option>\r\n                          <option value={2}>Feet</option>\r\n                        </Select>\r\n                      </FormControl>\r\n                    </div>\r\n                  )}\r\n                  <FormControl\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <TextField\r\n                      id=\"outlined-basic\"\r\n                      label=\"Price\"\r\n                      type=\"number\"\r\n                      variant=\"outlined\"\r\n                      onChange={handlePriceChange}\r\n                    />\r\n                  </FormControl>\r\n                  <FormControl\r\n                    fullWidth\r\n                    variant=\"outlined\"\r\n                    className={classes.formControl}\r\n                  >\r\n                    <TextField\r\n                      id=\"outlined-basic\"\r\n                      label=\"Quantity\"\r\n                      type=\"number\"\r\n                      variant=\"outlined\"\r\n                      onChange={handleQuantityChange}\r\n                    />\r\n                  </FormControl>\r\n                  <Button variant=\"contained\" color=\"primary\" fullWidth={true}>\r\n                    Total Amount: {totalAmount}\r\n                  </Button>\r\n                </CardContent>\r\n              </Card>\r\n            </Grid>\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}